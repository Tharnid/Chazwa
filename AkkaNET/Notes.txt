Classes of Applications

Financial
Betting/Gambling
Social Media
Telecoms

Divide workload between Actors

Chat/real time comm
real time gaming (player interactions)
Traffic Flow
Asset location

BI
Data Mining
IoT - streams of data

What kind of .Net apps would you use Akka.net?

-- Services (WCF, Web)
-- web app backend
-- Windows service


Reactive Manifesto
==================

Message Driven
Resillent
Elastic (allows it to react to worldload changes)

Actor
=====

-- building blocks
-- perform small well-defined task
-- Fundamental primitive computational unit

	Four Things Actors can do
	=========================

		-- Receive and react to messages
		-- create more actors
		-- send messages to other actors
		-- change behavior for next message

Messages
========

	POCO - Plain old Class Object

Actor Systems
=============

	-- contains actors
	-- can send messages to each other

Location Transparency
=====================

	-- The ability to send a message to another actor without needing to know where it is; whether it be in the same actor system instance on the same computer or
		another actor system on the other side of the earth lol

Actor Supervision Hierarchies
=============================

	-- Actor parent fixes problems with actor children


Akka on Nuget
=============

	+ Akka
	+ Akka.Logger.*
	+ Akka.Persistance.*
	+ Akka.DI.* (Dependency Injection)
	+ Akka.Cluster
	+ Akka.Remote (Remote Actors)

Defining an Actor
=================

	+ define class
	+ inherit from Akka base class
	+ define the message handling

	Actor References
	================

	+ ref to all child child reference
	+ parent ref 
=======
	+ Akka.Logger.*

	Actor Reference
	===============

		+ each actor has a reference to it'self
		+ ref to all of its children
		+ children have reference to parent etc

		+ Create a new Actor - ActorOf()
		+ Lookup existing actor - ActorSelection()

	Defining Messages
	=================

		+ Create POCO class
		+ Add properties
		+ Make setters private

		- Don't pass mutable state between actors
		- Create Immutable messages (thread-safe)
		- Consider remote use(serializable & size)

	Types of Message Sending
	========================

	Tell - Tells target something - Doesn't block waiting for a reply - Fire and Forget - Better scaling and concurrency
	Ask - send message/expect response - target actor has to reply - Timeout TaskCancelledException
	Forward - forward a sent message

	Actor Instantiation
	===================

	Define Props - recipe for how to make an instance of an actor

	Define which messages an actor will handle?
	===========================================

		Modify Playback actor to...

			++ respond to string an int messages

			++ use actor reference and Tell() to send a message

		Sending a custom message....

			++ Create PlayMovieMessage class, Modify OnReceive() method, and send new message to the actor

	Receive Actor?
	==============

		++ More elegant way of specifying what message types can be handled
		++ Additionally specify predicates to further filter if a message will be handled
		++ will automatically call the Unhandled method if a message is not matched...won't have to manually call it